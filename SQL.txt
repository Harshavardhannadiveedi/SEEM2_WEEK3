1.Creating Employees table:
Query:
   
    CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Department VARCHAR(50) NOT NULL
    );

2.Creating Orders table:
Query:

    CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE NOT NULL,
    CustomerID INT NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL
);

2.Insert a new employee into the Employees collection with the following data: EmployeeID: 1, FirstName: 'Alice', LastName: 'Johnson', DateOfBirth: '1990-01-15', Department: 'HR'.
Query:

    INSERT INTO Employees (EmployeeID, FirstName, LastName, DateOfBirth, Department)
    VALUES (1, 'Alice', 'Johnson', '1990-01-15', 'HR');

.Insert multiple records into the Orders collection with different OrderDates, CustomerIDs, and Amounts.
Query:

    INSERT INTO Orders (OrderID, OrderDate, CustomerID, Amount)
    VALUES 
    (1, '2023-10-01', 101, 5000.00),
    (2, '2023-10-05', 102, 1500.50),
    (3, '2023-10-10', 103, 3200.75),
    (4, '2023-10-15', 104, 2750.00),
    (5, '2023-10-20', 105, 4600.25);
    
3)
.Select all documents from the Employees collection.
.Select all documents from the Orders collection.
.Select only the FirstName and LastName from the Employees collection.
.Select the OrderID and Amount from the Orders collection.

->SELECT * FROM Employees;
->SELECT * FROM Orders;
->SELECT FirstName, LastName FROM Employees;
->SELECT OrderID, Amount FROM Orders;

4)
.Update the Department of the employee with EmployeeID 1 to 'Finance'.
.Update the Amount in the Orders collection where OrderID is 2 to 500.00.

->UPDATE Employees SET Department = 'Finance' WHERE EmployeeID = 1;
->UPDATE Orders SET Amount = 500.00 WHERE OrderID = 2;

5)
.Delete the employee from the Employees collection where EmployeeID is 1.
.Delete all orders from the Orders collection where the Amount is less than 100.

->DELETE FROM Employees WHERE EmployeeID = 1;
->DELETE FROM Orders WHERE Amount < 100.00;

6)
.Select all employees who work in the 'HR' department.
.Select all orders with an Amount greater than 300.

->SELECT * FROM Employees WHERE Department = 'HR';
->SELECT * FROM Orders WHERE Amount > 300.00;

7)
.Select employees who work in the 'HR' department and were born after '1990-01-01'.
.Select orders with an Amount greater than 300 and OrderDate before '2023-01-01'.
.Select employees who work in either the 'HR' or 'Finance' department.
.Select orders with an Amount less than 100 or placed after '2023-01-01'.

->SELECT * FROM Employees WHERE Department = 'HR' AND DateOfBirth > '1990-01-01';
->SELECT * FROM Employees WHERE Department = 'HR' AND DateOfBirth > '1990-01-01';
->SELECT * FROM Employees WHERE Department = 'HR' OR Department = 'Finance';
->SELECT * FROM Orders WHERE Amount < 100.00 OR OrderDate > '2023-01-01';

8)
.Select all employees and order the results by LastName in ascending order.
.Select all orders and order the results by Amount in descending order.

->SELECT * FROM Employees ORDER BY LastName ASC;
->SELECT * FROM Orders ORDER BY Amount DESC;

9)
.Count the number of employees in the Employees collection.
.Count the number of orders placed in the Orders collection.
.Find the average Amount of all orders in the Orders collection.
.Calculate the average age of employees (assuming thereâ€™s a function to calculate age from DateOfBirth).

->SELECT COUNT(*) AS EmployeeCount FROM Employees;
->SELECT COUNT(*) AS OrderCount FROM Orders;
->SELECT AVG(Amount) AS AverageAmount FROM Orders;
->SELECT AVG(YEAR(CURRENT_DATE) - YEAR(DateOfBirth)) AS AverageAge FROM Employees;

10)
.Count the number of employees in each Department.
.Calculate the total Amount of orders for each CustomerID.

->SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department;
->SELECT CustomerID, SUM(Amount) AS TotalAmount FROM Orders GROUP BY CustomerID;

11)
.Find all departments that have more than 5 employees.
.Find all CustomerIDs with total order Amount greater than 1000.

->SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department HAVING COUNT(*) > 5;
->SELECT CustomerID, SUM(Amount) AS TotalAmount FROM Orders GROUP BY CustomerID HAVING SUM(Amount) > 1000;

12)
.Inner Join: Join Employees and Orders on CustomerID (assuming employees are customers) and select FirstName, LastName, and Amount.
.Left Join: Perform a left join between Employees and Orders, returning all employees and their corresponding Order Amount if available.

->SELECT Employees.FirstName, Employees.LastName, Orders.Amount
FROM Employees
INNER JOIN Orders ON Employees.EmployeeID = Orders.CustomerID;

->SELECT Employees.FirstName, Employees.LastName, Orders.Amount
FROM Employees
LEFT JOIN Orders ON Employees.EmployeeID = Orders.CustomerID;

Project:E-Commerce Product Management System

->Create the Products Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Category VARCHAR(50) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    Stock INT NOT NULL
);

->Create the Categories Table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50) NOT NULL
);

-> Create the Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    OrderDate DATE NOT NULL,
    TotalAmount DECIMAL(10, 2) NOT NULL
);

-> Create the Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL
);

->Create the Reviews Table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    ProductID INT NOT NULL,
    CustomerID INT NOT NULL,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    Comment TEXT
);

 ->2.Insert Sample Data for Products
INSERT INTO Products (ProductID, ProductName, Category, Price, Stock)
VALUES 
(1, 'Laptop', 'Electronics', 59999.00, 50),
(2, 'Smartphone', 'Electronics', 35000.00, 100),
(3, 'Headphones', 'Accessories', 999.00, 200),
(4, 'Coffee Maker', 'Home Appliances', 2500.00, 30),
(5, 'Blender', 'Home Appliances', 2000.00, 20);

->3.Query to Select All Products in a Specific Category
SELECT * FROM Products
WHERE Category = 'Electronics';

->4. Update the Stock When a New Order is Placed
UPDATE Products
SET Stock = Stock - 1
WHERE ProductID = 1;  (Assuming one laptop is sold)

-> 5. Delete Products that are No Longer Available
DELETE FROM Products
WHERE Stock = 0;

->6. Filter Products Based on Price Range and Availability
SELECT * FROM Products
WHERE Price BETWEEN 50 AND 500 AND Stock > 0;

-> 7. Use AND/OR to Filter Products by Price and Rating
SELECT Products.*
FROM Products
JOIN Reviews ON Products.ProductID = Reviews.ProductID
WHERE (Price < 200 OR Rating >= 4);

-> 8. Sort Products by Price in Ascending Order
SELECT * FROM Products
ORDER BY Price ASC;

-> 9. Use Aggregate Functions to Find the Average Price of Products
SELECT AVG(Price) AS AveragePrice FROM Products;

-> 10. Group Products by Category and Calculate the Total Revenue
SELECT Category, SUM(Price * Stock) AS TotalRevenue
FROM Products
GROUP BY Category;

